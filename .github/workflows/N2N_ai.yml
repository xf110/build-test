name: N2N多线程版
on:
  push:
    branches: ["main"]
  workflow_dispatch:
env:
  TZ: Asia/Shanghai
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: arm64
            docker_img: muslcc/i686:aarch64-linux-musl
            cc_prefix: aarch64-linux-musl
          - name: mipsel
            docker_img: muslcc/i686:mipsel-linux-musl
            cc_prefix: mipsel-linux-musl
          - name: amd64
            docker_img: muslcc/i686:x86_64-linux-musl
            cc_prefix: x86_64-linux-musl
    steps:
      - name: 检查代码仓库
        uses: actions/checkout@v4

      - name: 验证Docker环境
        run: |
          if ! docker --version; then
            echo "启动Docker服务"
            sudo systemctl start docker
          fi
          docker info || { echo "Docker环境异常"; exit 1; }

      - name: 提前克隆N2N源码（避免容器内网络问题）
        run: |
          git clone --recursive https://github.com/xf110/n2n-2.8.x
          # 赋予容器读写权限（关键：避免挂载后权限不足）
          sudo chmod -R 777 n2n-2.8.x

      - name: 启动Docker容器并编译（修复语法错误）
        run: |
          # 1. 拉取Musl编译镜像（重试1次，确保成功率）
          if ! docker pull ${{ matrix.docker_img }}; then
            echo "重试拉取镜像"
            docker pull ${{ matrix.docker_img }} || exit 1
          fi

          # 2. Docker运行命令（关键修复：引号处理+内置UPX安装）
          docker run --rm \
            -v $PWD/n2n-2.8.x:/workspace \  # 挂载源码目录（无空格！）
            ${{ matrix.docker_img }} \      # 镜像名紧跟参数，无多余符号
            /bin/sh -c '                    # 外层用单引号，避免内部转义
              cd /workspace && \
              # 安装编译依赖（cmake/make/upx，均从Alpine源安装，无外部依赖）
              apk add --no-cache cmake make upx && \
              # 修复1：sed命令无需转义双引号（外层单引号内可直接用双引号）
              sed -i "s/OPTION(N2N_OPTION_AES \"USE AES\" ON)/OPTION(N2N_OPTION_AES \"USE AES\" OFF)/g" ./CMakeLists.txt && \
              mkdir -p build && cd build && \
              # CMake配置（静态编译，自动适配容器内编译器）
              cmake .. -DCMAKE_EXE_LINKER_FLAGS=-static && \
              # 编译（-j加速，失败时输出详细日志）
              make -j$(nproc) || { echo "编译失败"; exit 1; } && \
              # 剥离二进制（用容器内自带的strip工具）
              ${{ matrix.cc_prefix }}-strip edge supernode && \
              # 压缩（用apk安装的upx，无需依赖外部文件）
              upx --best --ultra-brute edge supernode || echo "UPX压缩跳过" && \
              # 重命名产物（方便后续上传）
              mv edge edge_${{ matrix.name }} && \
              mv supernode supernode_${{ matrix.name }}
            '  # 外层单引号闭合（无多余空格）

      - name: 上传编译产物
        uses: actions/upload-artifact@v4
        with:
          name: n2n-2.8.x-${{ matrix.name }}
          path: |
            n2n-2.8.x/build/edge_${{ matrix.name }}
            n2n-2.8.x/build/supernode_${{ matrix.name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 下载所有产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: 发布到Release
        uses: ncipollo/release-action@v1
        with:
          tag: N2N多线程版
          artifacts: "artifacts/**/*"
          token: ${{ secrets.test }}
          allowUpdates: true
          omitBodyDuringUpdate: true
