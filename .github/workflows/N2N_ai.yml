name: N2N多线程版
on:
  push:
    branches: ["main"]
  workflow_dispatch:
env:
  TZ: Asia/Shanghai
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: arm64
            tool: aarch64-linux-musl
            processor: aarch64
          - name: mipsel
            tool: mipsel-linux-musl
            processor: mipsel
          - name: amd64
            tool: x86_64-linux-musl
            processor: x86_64
    steps:
      - name: 检查代码仓库
        uses: actions/checkout@v4

      - name: 安装基础依赖和网络工具
        run: |
          sudo apt-get update && sudo apt-get install -y \
            cmake make wget curl dnsutils \
            --no-install-recommends

      - name: 下载交叉编译链（带备用源和多次重试）
        run: |
          sudo mkdir -p /opt/x-tools
          
          # 主源和备用源列表
          PRIMARY_urls=(
            "https://musl.cc/${{ matrix.tool }}-cross.tgz"
            "https://mirror.ghproxy.com/https://github.com/richfelker/musl-cross-make/releases/download/latest/${{ matrix.tool }}-cross.tgz"
            "https://cdn.jsdelivr.net/gh/richfelker/musl-cross-make@latest/${{ matrix.tool }}-cross.tgz"
          )
          
          # 多次尝试下载，使用不同源
          for url in "${urls[@]}"; do
            echo "尝试从 $url 下载..."
            if wget -c --tries=5 --timeout=30 "$url" -O "${{ matrix.tool }}-cross.tgz"; then
              echo "下载成功"
              break
            fi
            echo "从 $url 下载失败，尝试下一个源..."
          done
          
          # 检查是否下载成功
          if [ ! -f "${{ matrix.tool }}-cross.tgz" ]; then
            echo "所有源均下载失败"
            exit 1
          fi
          
          # 解压编译链
          tar -xf ${{ matrix.tool }}-cross.tgz -C /opt/x-tools || { 
            echo "解压编译链失败"; 
            exit 1; 
          }
          
          # 验证编译链是否存在
          if [ ! -f "/opt/x-tools/${{ matrix.tool }}-cross/bin/${{ matrix.tool }}-gcc" ]; then
            echo "编译链不存在"; 
            exit 1; 
          }

      - name: 验证UPX工具
        run: |
          if [ ! -f "upx3.95" ]; then
            echo "upx3.95文件缺失"; exit 1;
          fi
          sudo chmod +x upx3.95

      - name: 克隆源码并编译
        run: |
          git clone --recursive https://github.com/xf110/n2n-2.8.x || { echo "克隆源码失败"; exit 1; }
          cd n2n-2.8.x || { echo "进入源码目录失败"; exit 1; }
          sed -i 's/OPTION(N2N_OPTION_AES "USE AES" ON)/OPTION(N2N_OPTION_AES "USE AES" OFF)/g' ./CMakeLists.txt
          mkdir -p build && cd build || { echo "创建编译目录失败"; exit 1; }
          cmake .. \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.processor }} \
            -DCMAKE_C_COMPILER=/opt/x-tools/${{ matrix.tool }}-cross/bin/${{ matrix.tool }}-gcc \
            -DCMAKE_EXE_LINKER_FLAGS=-static || { echo "CMake配置失败"; exit 1; }
          make -j$(nproc) || { echo "编译失败"; exit 1; }
          /opt/x-tools/${{ matrix.tool }}-cross/bin/${{ matrix.tool }}-strip edge supernode || { echo "剥离失败"; exit 1; }
          ../../upx3.95 --best --ultra-brute edge || echo "UPX压缩edge失败，跳过"
          ../../upx3.95 --best --ultra-brute supernode || echo "UPX压缩supernode失败，跳过"
          mv edge edge_${{ matrix.name }}
          mv supernode supernode_${{ matrix.name }}

      - name: 上传 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: n2n-2.8.x-${{ matrix.name }}
          path: |
            n2n-2.8.x/build/edge_${{ matrix.name }}
            n2n-2.8.x/build/supernode_${{ matrix.name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: 下载所有artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: 发布
        uses: ncipollo/release-action@v1
        with:
          tag: N2N多线程版
          artifacts: "artifacts/**/*"
          token: ${{ secrets.test }}
          allowUpdates: true
          omitBodyDuringUpdate: true
